std::string vertexShaderSource =
	"layout(location = 0) in vec3 v_Position;\n"
	"layout(location = 2) in vec2 v_TexCoord;\n"
	"\n"
	"out vec2 f_TexCoord;\n"
	"\n"
	"void main()\n"
	"{\n"
	"    gl_Position = vec4(v_Position * 2.0, 1.0);\n"
	"    f_TexCoord = v_TexCoord;\n"
	"}\n"
	"\n";
std::string fragmentShaderSource =
	"layout(location = 0) out vec4 f_FragColor;\n"
	"\n"
	"in vec2 f_TexCoord;\n"
	"\n"
	"uniform sampler2D frg_Texture;\n"
	"\n"
	"uniform bool u_Horizontal;\n"
	"const float weights[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\n"
	"\n"
	"void main()\n"
	"{\n"
	"    vec2 texOffset = 1.0 / textureSize(frg_Texture, 0);\n"
	"    vec3 result = texture(frg_Texture, f_TexCoord).rgb * weights[0];\n"
	"    if (u_Horizontal)\n"
	"    {\n"
	"        for (int i = 1; i < 5; ++i)\n"
	"        {\n"
	"            result += texture(frg_Texture, f_TexCoord + vec2(texOffset.x * i, 0.0)).rgb * weights[i];\n"
	"            result += texture(frg_Texture, f_TexCoord - vec2(texOffset.x * i, 0.0)).rgb * weights[i];\n"
	"        }\n"
	"    }\n"
	"    else\n"
	"    {\n"
	"        for (int i = 1; i < 5; ++i)\n"
	"        {\n"
	"            result += texture(frg_Texture, f_TexCoord + vec2(0.0, texOffset.y * i)).rgb * weights[i];\n"
	"            result += texture(frg_Texture, f_TexCoord - vec2(0.0, texOffset.y * i)).rgb * weights[i];\n"
	"        }\n"
	"    }\n"
	"    f_FragColor = vec4(result, 1.0);\n"
	"}\n";
